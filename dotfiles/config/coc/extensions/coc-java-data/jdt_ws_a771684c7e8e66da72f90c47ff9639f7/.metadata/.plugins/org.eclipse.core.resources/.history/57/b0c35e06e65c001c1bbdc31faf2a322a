package com.bep3.supply.application.mapper;

import com.bep3.supply.application.dto.DishDTO;
import com.bep3.supply.application.dto.IngredientDTO;
import com.bep3.supply.application.dto.UpdateDishDTO;
import com.bep3.supply.domain.model.Dish;
import com.bep3.supply.domain.model.Ingredient;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2021-12-14T14:54:33+0100",
    comments = "version: 1.4.2.Final, compiler: Eclipse JDT (IDE) 1.4.50.v20210914-1429, environment: Java 17.0.1 (N/A)"
)
@Component
public class DishMapperImpl implements DishMapper {

    @Override
    public DishDTO toDishDTO(Dish dish) {
        if ( dish == null ) {
            return null;
        }

        DishDTO dishDTO = new DishDTO();

        dishDTO.dishId = dish.getDishId();
        dishDTO.name = dish.getName();
        dishDTO.price = dish.getPrice();
        dishDTO.ingredients = ingredientListToIngredientDTOList( dish.getIngredients() );

        return dishDTO;
    }

    @Override
    public List<DishDTO> toDishDTOs(List<Dish> dishes) {
        if ( dishes == null ) {
            return null;
        }

        List<DishDTO> list = new ArrayList<DishDTO>( dishes.size() );
        for ( Dish dish : dishes ) {
            list.add( toDishDTO( dish ) );
        }

        return list;
    }

    @Override
    public UpdateDishDTO toUpdateDishDTO(Dish dish) {
        if ( dish == null ) {
            return null;
        }

        UpdateDishDTO updateDishDTO = new UpdateDishDTO();

        updateDishDTO.dishId = dish.getDishId();
        updateDishDTO.name = dish.getName();
        updateDishDTO.price = dish.getPrice();

        return updateDishDTO;
    }

    @Override
    public Dish toDish(UpdateDishDTO updateDishDTO) {
        if ( updateDishDTO == null ) {
            return null;
        }

        Dish dish = new Dish();

        dish.setDishId( updateDishDTO.dishId );
        dish.setName( updateDishDTO.name );
        dish.setPrice( updateDishDTO.price );

        return dish;
    }

    @Override
    public void updateDishFromDto(UpdateDishDTO dto, Dish entity) {
        if ( dto == null ) {
            return;
        }

        if ( dto.dishId != null ) {
            entity.setDishId( dto.dishId );
        }
        if ( dto.name != null ) {
            entity.setName( dto.name );
        }
        if ( dto.price != null ) {
            entity.setPrice( dto.price );
        }
    }

    protected IngredientDTO ingredientToIngredientDTO(Ingredient ingredient) {
        if ( ingredient == null ) {
            return null;
        }

        IngredientDTO ingredientDTO = new IngredientDTO();

        ingredientDTO.ingredientId = ingredient.getIngredientId();
        ingredientDTO.name = ingredient.getName();

        return ingredientDTO;
    }

    protected List<IngredientDTO> ingredientListToIngredientDTOList(List<Ingredient> list) {
        if ( list == null ) {
            return null;
        }

        List<IngredientDTO> list1 = new ArrayList<IngredientDTO>( list.size() );
        for ( Ingredient ingredient : list ) {
            list1.add( ingredientToIngredientDTO( ingredient ) );
        }

        return list1;
    }
}
