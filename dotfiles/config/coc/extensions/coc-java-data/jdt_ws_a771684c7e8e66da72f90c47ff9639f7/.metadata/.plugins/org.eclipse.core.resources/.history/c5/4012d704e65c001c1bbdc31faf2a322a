package com.bep3.identityaccess.application.mapper;

import com.bep3.identityaccess.application.dto.UpdateAccountDTO;
import com.bep3.identityaccess.domain.model.Account;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2021-12-14T14:54:29+0100",
    comments = "version: 1.4.2.Final, compiler: Eclipse JDT (IDE) 1.4.50.v20210914-1429, environment: Java 17.0.1 (N/A)"
)
@Component
public class AccountMapperImpl implements AccountMapper {

    @Override
    public UpdateAccountDTO toUpdateAccountDTO(Account account) {
        if ( account == null ) {
            return null;
        }

        UpdateAccountDTO updateAccountDTO = new UpdateAccountDTO();

        updateAccountDTO.accountId = account.getAccountId();
        updateAccountDTO.email = account.getEmail();
        updateAccountDTO.password = account.getPassword();
        updateAccountDTO.role = account.getRole();
        List<String> list = account.getOrderIds();
        if ( list != null ) {
            updateAccountDTO.orderIds = new ArrayList<String>( list );
        }

        return updateAccountDTO;
    }

    @Override
    public Account toAccount(UpdateAccountDTO updateAccountDTO) {
        if ( updateAccountDTO == null ) {
            return null;
        }

        Account account = new Account();

        account.setAccountId( updateAccountDTO.accountId );
        account.setEmail( updateAccountDTO.email );
        account.setPassword( updateAccountDTO.password );
        account.setRole( updateAccountDTO.role );
        List<String> list = updateAccountDTO.orderIds;
        if ( list != null ) {
            account.setOrderIds( new ArrayList<String>( list ) );
        }

        return account;
    }

    @Override
    public void updateAccountFromDto(UpdateAccountDTO dto, Account entity) {
        if ( dto == null ) {
            return;
        }

        if ( dto.accountId != null ) {
            entity.setAccountId( dto.accountId );
        }
        if ( dto.email != null ) {
            entity.setEmail( dto.email );
        }
        if ( dto.password != null ) {
            entity.setPassword( dto.password );
        }
        if ( dto.role != null ) {
            entity.setRole( dto.role );
        }
        if ( entity.getOrderIds() != null ) {
            List<String> list = dto.orderIds;
            if ( list != null ) {
                entity.getOrderIds().clear();
                entity.getOrderIds().addAll( list );
            }
        }
        else {
            List<String> list = dto.orderIds;
            if ( list != null ) {
                entity.setOrderIds( new ArrayList<String>( list ) );
            }
        }
    }
}
